React新建项目：
npx create-react-app my-app
cd my-app
npm/yarn start


React组件基本结构：
class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.handleChange = this.handleChange.bind(this);
    this.state = {date: new Date()};
  }

  componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(),
      1000
    );
  }

  componentWillUnmount() {
    clearInterval(this.timerID);
  }

  tick() {
    this.setState({
      date: new Date()
    });
  }

  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}

ReactDOM.render(
  <Clock />,
  document.getElementById('root')
);


事件处理传参：
<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>
<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>

preventPop(name, e){    //事件对象e要放在最后
        e.preventDefault();
        alert(name);
    }
    
    render(){
        return (
            <div>
                <p>hello</p>
                {/* Pass params via bind() method. */}
                <a href="https://reactjs.org" onClick={this.preventPop.bind(this,this.state.name)}>Click</a>
            </div>
        );
    }

条件渲染：&&（true && expression总是返回expression，而false && expression总是返回false）
{unreadMessages.length > 0 &&
        <h2>
          You have {unreadMessages.length} unread messages.
        </h2>
      }


map()遍历数组：
const numbers = [1, 2, 3, 4, 5];
const listItems = numbers.map((number) =>
  <li>{number}</li>
);


state与props的区别：
props：组件间传递的一种方式，props自然也可以传递state。由于React的数据流是自上而下的，所以是从父组件向子组件进行传递；另外组件内部的this.props属性是只读的不可修改！
state：组件内部的状态（数据），不能够直接修改，必须要通过setState来改变值的状态，从而达到更新组件内部数据的作用。

判断数据需不需要是state，只需考虑三个问题：
1.它是通过 props 从父级传来的吗？如果是，他可能不是 state。
2.它随着时间推移不变吗？如果是，它可能不是 state。
3.你能够根据组件中任何其他的 state 或 props 把它计算出来吗？如果是，它不是 state。



------------------------------------------------------------------------

React Native文档：https://reactnative.cn/docs/getting-started/

https://www.cnblogs.com/jone-chen/p/6248465.html（React Native教程）

搭建环境：
安装python：（下载地址：https://www.python.org/downloads/windows/）（推荐下载2.x版本）

配置java环境：
https://jingyan.baidu.com/album/db55b609fa946e4ba20a2f56.html?picindex=1（jdk版本最好是1.8）

使用yarn 代替 npm/cnpm
下载yarn：npm install -g yarn react-native-cli
设置镜像源：
yarn config set registry https://registry.npm.taobao.org --global
yarn config set disturl https://npm.taobao.org/dist --global

yarn使用方法：
初始化一个新项目
yarn init

添加依赖包
yarn add [package]
yarn add [package]@[version]
yarn add [package]@[tag]

将依赖项添加到不同依赖项类别中
分别添加到 devDependencies、peerDependencies 和 optionalDependencies 类别中：
yarn add [package] --dev
yarn add [package] --peer
yarn add [package] --optional

升级依赖包
yarn upgrade [package]
yarn upgrade [package]@[version]
yarn upgrade [package]@[tag]

移除依赖包
yarn remove [package]

安装项目的全部依赖
yarn
或者
yarn install


环境变量配置：
安装Android Studio：http://www.android-studio.org/
打开控制面板 -> 系统和安全 -> 系统 -> 高级系统设置 -> 高级 -> 环境变量 -> 新建，创建一个名为ANDROID_HOME的环境变量（系统或用户变量均可）
c:\Users\你的用户名\AppData\Local\Android\Sdk
用户变量：
ANDROID_HOME	D:\Android\sdk
PATH		D:\Java\sdk\tools
		D:\Java\sdk\platform-tools
系统变量：
JAVA_HOME	C:\Program Files (x86)\Java\jdk1.8.0_181
CLASSPATH	%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;
Path		C:\Users\Demenk\AppData\Local\Android\Sdk\platform-tools
		%JAVA_HOME%\bin
		%JAVA_HOME%\jre\bin

expo client下载：https://expo.io/tools
Android Studio下载：https://developer.android.google.cn/studio/
Genymotion模拟器：https://www.genymotion.com/download/
VirtualBox下载：https://www.virtualbox.org/wiki/Downloads
帐号：lebron666
密码：lebron0618

创建React Native项目：
npm install -g yarn react-native-cli
react-native init demo
cd demo
npm i
react-native start
react-native run-android
react-native run-ios

查看是否连接成功：
adb devices
连接模拟器：
adb connect 127.0.0.1:62001 


react-native app项目：
安装工作集：
npm install -g create-react-native-app
创建项目：
create-react-native-app projectName
cd projectName
生成android和ios文件夹：
npm run eject
npm install
预览项目：
expo start

app.json：
"expo": {
  "sdkVersion": "18.0.0"
 }




----------------------------------------------------------------
常用组件：
<Text></Text>
<Image/>


//特定平台选择
...Platform.select({
      ios: {
	
      },
      android: {
	
      },
}),


