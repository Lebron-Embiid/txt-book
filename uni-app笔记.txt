uni-app upx 是相对于基准宽度的单位，可以根据屏幕宽度进行自适应。uni-app 规定屏幕基准宽度750upx。
页面元素宽度在 uni-app 中的宽度计算公式：
750 * 元素在设计稿中的宽度 / 设计稿基准宽度

静态文件全部放在static文件夹（image，css）
新建common文件夹，可以用于存放公用js或者接口

全局变量，再main.js挂载：
import httpApi from './common/httpApi'
import HttpRequest from './common/httpRequest'
import HttpCache from './common/cache'

Vue.prototype.$api = httpApi
Vue.prototype.$Request = HttpRequest
Vue.prototype.$Sysconf = HttpRequest.config
Vue.prototype.$SysCache = HttpCache

调用：this.$api

------------------------------------------------------------
打包H5部署到服务器访问：
源码视图里面的h5配置：
"h5" : {
        "router" : {
            "mode" : "hash",
            "base" : "/yl/"
        }
    }
发行 -> 网站-H5手机版 会生成h5文件夹
复制文件夹内的文件到服务器的yl文件夹，然后访问
http://doing.demenk.com/yl/

--------------------------------------------------------------
注意：
1. 禁用原生导航后，打包后自定义导航与手机状态栏重叠的解决方法：
<!-- #ifdef APP-PLUS -->  
<view class="status_bar">  
    <view class="top_view"></view>  
</view>  
<!-- #endif -->  

禁用原生导航的页面样式：
top: var(--status-bar-height);	（固定定位的top）

App.vue全局样式：
.status_bar {  
    height: var(--status-bar-height);  
    width: 100%;  
    background-color: #F8F8F8;  
}  
.top_view {  
    height: var(--status-bar-height);  
    width: 100%;  
    position: fixed;  
    background-color: #F8F8F8;  
    top: 0;  
    z-index: 999;  
}  

2.修改单独的某个页面背景颜色：
<view class="page_bg"></view>
.page_bg{background: #f5f5f7 !important;min-height: 100%;position: fixed;width: 100%;z-index: -1;left: 0;top: 0;}
--------------------------------------------------------------

对接接口模板：
main.js：
Vue.prototype.$api = "http://gao2.demenk.com/youlanphp/web/index.php?store_id=1&r=api/"
Vue.prototype.$access_token = '8baae9367939e871a82286f778f3ad77'
//uni.getStorageSync('access_token')

var that = this;
uni.request({
				url: that.$api+'default/goods-list&access_token='+that.$access_token,
				data: {},
				method: 'GET',
				dataType: "json",
				header: {
					'content-type': 'application/x-www-form-urlencoded'
				},
				success: res => {
					if(res.data.code == 1){
						//登录成功后，缓存token。
						uni.setStorageSync('access_token',res.data.data.access_token);
						uni.showToast({title:res.data.msg,icon:'none',duration:1500});
						that.$access_token = uni.getStorageSync('access_token');
						setTimeout(function(){
							uni.reLaunch({
								url: "/pages/index/index"
							})
						},1500)		
					}
				},
				fail: () => {
					uni.showToast({
						title:res.data.msg,
						icon:'none',
					});
				}
			});


uni.showModal模板：
uni.showModal({
	title: "提示",
	content: "确定发布？",
	success: (res) => {
		if(res.confirm){
			
		}
	},
	fail: (err) => {
		console.log(err)
	}
})

--------------------------------------------------------------

父级子级交互 
父组件：
<commonSwiper :swiperList="swiperList" @preview="previewImgs"></commonSwiper>

子组件：
<swiper-item v-for="(item,index) in swiperList" :key="index" @click="preview(index)">
	<view class="swiper-item"><image :src="item" mode="aspectFill"></image></view>
</swiper-item>

1、父级向子级传参：
父组件：
<commonSwiper :swiperList="swiperList"></commonSwiper>
子组件：（用prop属性接收父级传递的参数）
props:{
	swiperList: Array
},

2、子级向父级传递事件：
父组件：
<commonSwiper @preview="previewImgs"></commonSwiper>
previewImgs: function(e){
	console.log(e);			//（e是子级传递的索引）
}
methods:{
	preview(e) {
		this.$emit('preview',e)	//（'preview'是父级的事件名）
	}
}

--------------------------------------------------------------
选项卡效果模板：
<view class="list_nav">
	<view v-for="(item,index) in navbar" :key="index" :class="[currentTab==index ? 'active' : '']" @click="navbarTap(index)">{{item.name}}</view>
</view>
<!-- 视频 -->
<view class="video_list" v-show="currentTab == 0">
		
</view>
<!-- 音频 -->
<view class="audio_list" v-show="currentTab == 1">
		
</view>

data(){
	return{
		navbar:[{name:"视频"},{name:"音频"}],
		currentTab:0
	}
},
methods:{
	navbarTap: function(e){
		console.log(e)
		this.currentTab = e;
	}
}

-----------------------------------------------------------
picker效果：
<picker class="acc_right" @change="bindPickerChange" :value="index" :range="array">
	<view class="uni-input">{{array[index]}}</view>
	<image src="../../static/next.png" mode="widthFix"></image>
</picker>

data:{
	array: ['中国', '美国', '巴西', '日本'],
	index: 0,
},
methods:{
	bindPickerChange: function(e) {
		console.log('picker发送选择改变，携带值为', e.target.value)
		this.index = e.target.value
	}
}

------------------------------------------------------------
省市区三级联动：
<cityPicker :themeColor="themeColor" ref="cityPicker" :pickerValueDefault="cityPickerValueDefault" @onCancel="onCancel" @onConfirm="onConfirm"></cityPicker>
<view class="acc_right" @click="showMulLinkageThreePicker">
	<view>{{pickerText}}</view>
	<image src="../../static/next.png" mode="widthFix"></image>
</view>

js:
import cityPicker from '../../components/citypicker/cityPicker.vue'
import cityData from '../../common/city.data.js'
export default{
	data(){
		return{
			cityPickerValueDefault: [0, 0, 1],
                		themeColor: '#007AFF',
			pickerText: '请选择'
		}
	},
	components:{
		cityPicker
	},
	methods:{
		onCancel(e) {
                		this.$refs.cityPicker.pickerCancel();
            		},
		onConfirm(e) {
			console.log(e.label);
                		this.pickerText = e.label;
            		},
		showMulLinkageThreePicker(e){
			this.$refs.cityPicker.showPickerView();
		}
	},
 	onBackPress() {
		if (this.$refs.cityPicker.showPicker) {
		this.$refs.cityPicker.pickerCancel();
			return true;
		}
       	 },
	onUnload() {
		if (this.$refs.cityPicker.showPicker) {
			this.$refs.cityPicker.pickerCancel();
            		}
	}
}

------------------------------
上传图片
uni.uploadFile({
							url: that.$api+'default/upload-image', //图片接口
							filePath: res.tempFilePaths[0],
							name: 'image',
							success: (uploadFileRes) => {
								var data = JSON.parse(uploadFileRes.data);
								console.log(data.data.url);
								that.photos.push(data.data.url);
								console.log(that.photos)
							}
						});

-----------------------------------

富文本解析：
<u-parse :content="answer"></u-parse>
import uParse from '@/components/u-parse/u-parse.vue'

data(){
			return{
				answer: ""
			}
		},
		components:{
			uParse
		},
